#!/bin/bash
set -euo pipefail
source src/common.sh

AconfCompile

LogEnter "Applying configuration...\n"

# Unknown packages (installed but not listed)

unknown_packages=($(comm -13																			\
					<((PrintArray           packages ; PrintArray           foreign_packages) | sort)	\
					<((PrintArray installed_packages ; PrintArray installed_foreign_packages) | sort)))

if [[ ${#unknown_packages[@]} != 0 ]]
then
	LogEnter "Unpinning %s unknown packages.\n" "$(Color G ${#unknown_packages[@]})"
	Print0Array unknown_packages | sudo xargs -0 pacman --database --asdeps
	LogLeave
fi

LogEnter "Removing orphan packages...\n"

# We have to loop, since pacman's dependency scanning doesn't seem to be recursive

iter=1

while true
do
	LogEnter "Iteration %s:\n" "$(Color G "$iter")"

	LogEnter "Querying orphan packages...\n"
	orphan_packages=($(pacman --query --unrequired --unrequired --deps --quiet || true))
	LogLeave

	if [[ ${#orphan_packages[@]} != 0 ]]
	then
		LogEnter "Removing %s orphan packages.\n" "$(Color G ${#orphan_packages[@]})"
		sudo pacman --remove "${orphan_packages[@]}"
		LogLeave
	fi

	iter=$((iter+1))

	LogLeave # Iteration

	if [[ ${#orphan_packages[@]} == 0 ]]
	then
		break
	fi
done

LogLeave # Removing orphan packages

# Missing packages (listed but not installed on current system)

missing_packages=($(comm -23 <(echo "${packages[*]}") <(echo "${installed_packages[*]}")))

if [[ ${#missing_packages[@]} != 0 ]]
then
	LogEnter "Installing %s missing packages.\n" "$(Color G ${#missing_packages[@]})"

	# TODO: Mark package as explicitly installed if it's already installed.
	sudo pacman --sync --needed "${missing_packages[@]}"

	LogLeave
fi

# TODO: install missing foreign packages

# TODO: files and their properties

LogLeave # Applying configuration
