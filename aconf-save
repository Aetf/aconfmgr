#!/bin/bash
set -euo pipefail
source src/common.sh

AconfCompile

# Unknown native packages (installed but not listed)

unknown_packages=($(comm -13 <(echo "${packages[*]}") <(echo "${installed_packages[*]}")))

if [[ ${#unknown_packages[@]} != 0 ]]
then
	printf "Found %s unknown packages. Registering...\n" ${#unknown_packages}
	printf "\n\n# %s - Unknown packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${unknown_packages[@]}"
	do
		printf ">> \"\$output_dir\"/packages.txt echo %q #%s\n" "$package" "$(pacman --query --info "$package" | grep '^Description' | cut -d ':' -f 2)" >> "$config_save_target"
	done
fi

# Missing native packages (listed but not installed on current system)

missing_packages=($(comm -23 <(echo "${packages[*]}") <(echo "${installed_packages[*]}")))

if [[ ${#missing_packages[@]} != 0 ]]
then
	printf "Found %s missing packages. Un-registering.\n" ${#missing_packages[@]}
	printf "\n\n# %s - Missing packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${missing_packages[@]}"
	do
		printf "sed -i \"\$output_dir\"/packages.txt -e '/^'%q'\$/d'\n" "$package" >> "$config_save_target"
	done
fi

# Unknown foreign packages (installed but not listed)

unknown_foreign_packages=($(comm -13 <(echo "${foreign_packages[*]}") <(echo "${installed_foreign_packages[*]}")))

if [[ ${#unknown_foreign_packages[@]} != 0 ]]
then
	printf "Found %s unknown foreign packages. Registering...\n" ${#unknown_foreign_packages}
	printf "\n\n# %s - Unknown foreign packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${unknown_foreign_packages[@]}"
	do
		printf ">> \"\$output_dir\"/foreign-packages.txt echo %q #%s\n" "$package" "$(pacman --query --info "$package" | grep '^Description' | cut -d ':' -f 2)" >> "$config_save_target"
	done
fi

# Missing foreign packages (listed but not installed on current system)

missing_foreign_packages=($(comm -23 <(echo "${foreign_packages[*]}") <(echo "${installed_foreign_packages[*]}")))

if [[ ${#missing_foreign_packages[@]} != 0 ]]
then
	printf "Found %s missing foreign packages. Un-registering.\n" ${#missing_foreign_packages[@]}
	printf "\n\n# %s - Missing foreign packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${missing_foreign_packages[@]}"
	do
		printf "sed -i \"\$output_dir\"/foreign-packages.txt -e '/^'%q'\$/d'\n" "$package" >> "$config_save_target"
	done
fi

# Untracked/modified files - collect

warn_size_threshold=$((10*1024*1024))

function AconfAddFile() {
	mkdir --parents "$(dirname "$system_dir"/files/"$1")"
	if sudo test -h "$1"
	then
		ln -s "$(sudo readlink "$1")" "$system_dir"/files/"$1"
	else
		local size
		size=$(sudo stat "$1" --format=%s)
		if [[ $size -gt $warn_size_threshold ]]
		then
			printf "Warning: copying large file (%s bytes). Add to ignore_paths to ignore.\n" "$size"
		fi
		( sudo cat "$1" ) > "$system_dir"/files/"$1"
	fi

	{
		printf "mode	%s	%q\n" "$(sudo stat --format=%a "$1")" "$1"
		printf "owner	%s	%q\n" "$(sudo stat --format=%U "$1")" "$1"
		printf "group	%s	%q\n" "$(sudo stat --format=%G "$1")" "$1"
	} >> "$system_dir"/file-props.txt
}

# Untracked files

ignore_args=()
for ignore_path in "${ignore_paths[@]}"
do
	ignore_args+=(-wholename "$ignore_path" -prune -o)
done

echo "Searching for untracked files..."

while read -r -d $'\0' line
do
	#echo "ignore_paths+='$line' # "
	printf "Found untracked file: %s\n" "$line"
	AconfAddFile "$line"
done < <(																				\
	comm -13 --zero-terminated															\
		 <(pacman --query --list --quiet | sed '/\/$/d' | sort --unique | tr '\n' '\0')	\
		 <(sudo find / -not \(															\
				"${ignore_args[@]}"														\
				-type d																	\
				\) -print0 |															\
				  sort --unique --zero-terminated) )									\

# Modified files

ANSI_clear_line="[0K"

echo "Searching for modified files..."
while read -r line
do
	if [[ $line =~ ^(.*):\ \'(.*)\'\ md5sum\ mismatch ]]
	then
		printf "%s: %s\n" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
		# TODO: Check ignores
		AconfAddFile "${BASH_REMATCH[2]}"
	elif [[ $line =~ ^(.*):\  ]]
	then
		printf "%s%s\r" "${ANSI_clear_line}" "${BASH_REMATCH[1]}"
		#echo "Now at ${BASH_REMATCH[1]}"
	fi
done < <(sudo sh -c "stdbuf -o0 paccheck --md5sum --files --backup --noupgrade 2>&1")
printf "\n"

# Untracked/modified files - diff

mkdir --parents "$output_dir"/files
mkdir --parents "$system_dir"/files
mkdir --parents "$tmp_dir"

( cd "$output_dir"/files && find . -not -type d -print0 ) | cut --zero-terminated -c 3- | sort --zero-terminated > "$tmp_dir"/output-files
( cd "$system_dir"/files && find . -not -type d -print0 ) | cut --zero-terminated -c 3- | sort --zero-terminated > "$tmp_dir"/system-files

new_files=()

while read -r -d $'\0' file
do
	printf "New file: %s\n" "$file"
	new_files+=("$file")
done < <(comm -13 --zero-terminated "$tmp_dir"/output-files "$tmp_dir"/system-files)

while read -r -d $'\0' file
do
	if ! diff --no-dereference --brief "$output_dir"/files/"$file" "$system_dir"/files/"$file" > /dev/null
	then
		printf "Changed file: %s\n" "$file"
		new_files+=("$file")
	fi
done < <(comm -12 --zero-terminated "$tmp_dir"/output-files "$tmp_dir"/system-files)

extra_files=()

while read -r -d $'\0' file
do
	printf "Extra file: %s\n" "$file"
	extra_files+=("$file")
done < <(comm -23 --zero-terminated "$tmp_dir"/output-files "$tmp_dir"/system-files)

if [[ ${#new_files[@]} != 0 ]]
then
	printf "Found %s new files.\n" ${#new_files[@]}
	printf "\n\n# %s - New files\n\n\n" "$(date)" >> "$config_save_target"
	for file in "${new_files[@]}"
	do
		mkdir --parents "$(dirname "$config_dir"/99-unsorted/"$file")"
		cp --no-dereference "$system_dir"/files/"$file" "$config_dir"/99-unsorted/"$file"

		printf "mkdir --parents \"\$output_dir\"/files/%q\n" "$(dirname "$file")" >> "$config_save_target"
		printf "cp --no-dereference \"\$config_dir\"/99-unsorted/%q \"\$output_dir\"/files/%q\n" "$file" "$file" >> "$config_save_target"
	done
fi

if [[ ${#extra_files[@]} != 0 ]]
then
	printf "Found %s extra files.\n" ${#extra_files[@]}
	printf "\n\n# %s - Extra files\n\n\n" "$(date)" >> "$config_save_target"
	for file in "${extra_files[@]}"
	do
		printf "rm \"\$output_dir\"/files/%q\n" "$file" >> "$config_save_target"
	done
fi

# Modified file properties

function AconfReadFileProps() {
	local filename="$1" # Path to file-props.txt to be read
	local varname="$2"  # Name of global associative array variable to read into

	typeset -Ag "$varname"

	local line
	while read -r line
	do
		if [[ $line =~ ^(.*)\	(.*)\	(.*)$ ]]
		then
			local kind="${BASH_REMATCH[1]}"
			local value="${BASH_REMATCH[2]}"
			local file="${BASH_REMATCH[3]}" # Keep it in escaped form

			if [[ -z "$value" ]]
			then
				unset "$varname[$kind:$file]"
			else
				eval "$varname[\$kind:\$file]=\"\$value\""
			fi
		fi
	done < "$filename"
}

AconfReadFileProps "$output_dir"/file-props.txt output_file_props
AconfReadFileProps "$system_dir"/file-props.txt system_file_props

new_file_props=()
extra_file_props=()

for key in "${!system_file_props[@]}"
do
	if [[ -z "${output_file_props[$key]+x}" || "${system_file_props[$key]}" != "${output_file_props[$key]}" ]]
	then
		new_file_props+=("$key")
	fi
done

for key in "${!output_file_props[@]}"
do
	if [[ -z "${system_file_props[$key]+x}" ]]
	then
		extra_file_props+=("$key")
	fi
done

if [[ ${#new_file_props[@]} != 0 ]]
then
	printf "\n\n# %s - New file properties\n\n\n" "$(date)" >> "$config_save_target"
	for key in "${new_file_props[@]}"
	do
		line="${key%%:*}	${system_file_props[$key]}	${key#*:}"
		printf ">> \"\$output_dir\"/file-props.txt echo %q\n" "$line" >> "$config_save_target"
	done
fi

if [[ ${#extra_file_props[@]} != 0 ]]
then
	printf "\n\n# %s - Extra file properties\n\n\n" "$(date)" >> "$config_save_target"
	for key in "${extra_file_props[@]}"
	do
		line="${key%%:*}		${key#*:}"
		printf ">> \"\$output_dir\"/file-props.txt echo %q\n" "$line" >> "$config_save_target"
	done
fi

# Report

echo "Done."
