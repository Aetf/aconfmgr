#!/bin/bash
set -euo pipefail
typeset config_save_target system_dir output_dir config_dir tmp_dir ignore_paths # for shellcheck
source src/common.sh

AconfCompile

LogEnter "Saving configuration...\n"

config_save_target=$config_dir/99-unsorted.sh

# Unknown native packages (installed but not listed)

unknown_packages=($(comm -13 <(PrintArray packages) <(PrintArray installed_packages)))

if [[ ${#unknown_packages[@]} != 0 ]]
then
	LogEnter "Found %s unknown packages. Registering...\n" "$(Color G ${#unknown_packages[@]})"
	printf "\n\n# %s - Unknown packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${unknown_packages[@]}"
	do
		Log "%s...\r" "$(Color M "$package")"
		printf ">> \"\$output_dir\"/packages.txt echo %q #%s\n" "$package" "$(pacman --query --info "$package" | grep '^Description' | cut -d ':' -f 2)" >> "$config_save_target"
	done
	LogLeave
fi

# Missing native packages (listed but not installed on current system)

missing_packages=($(comm -23 <(PrintArray packages) <(PrintArray installed_packages)))

if [[ ${#missing_packages[@]} != 0 ]]
then
	LogEnter "Found %s missing packages. Un-registering.\n" "$(Color G ${#missing_packages[@]})"
	printf "\n\n# %s - Missing packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${missing_packages[@]}"
	do
		printf "sed -i \"\$output_dir\"/packages.txt -e '/^'%q'\$/d'\n" "$package" >> "$config_save_target"
	done
	LogLeave
fi

# Unknown foreign packages (installed but not listed)

unknown_foreign_packages=($(comm -13 <(PrintArray foreign_packages) <(PrintArray installed_foreign_packages)))

if [[ ${#unknown_foreign_packages[@]} != 0 ]]
then
	LogEnter "Found %s unknown foreign packages. Registering...\n" "$(Color G ${#unknown_foreign_packages[@]})"
	printf "\n\n# %s - Unknown foreign packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${unknown_foreign_packages[@]}"
	do
		Log "%s...\r" "$(Color M "$package")"
		printf ">> \"\$output_dir\"/foreign-packages.txt echo %q #%s\n" "$package" "$(pacman --query --info "$package" | grep '^Description' | cut -d ':' -f 2)" >> "$config_save_target"
	done
	LogLeave
fi

# Missing foreign packages (listed but not installed on current system)

missing_foreign_packages=($(comm -23 <(PrintArray foreign_packages) <(PrintArray installed_foreign_packages)))

if [[ ${#missing_foreign_packages[@]} != 0 ]]
then
	LogEnter "Found %s missing foreign packages. Un-registering.\n" "$(Color G ${#missing_foreign_packages[@]})"
	printf "\n\n# %s - Missing foreign packages\n\n\n" "$(date)" >> "$config_save_target"
	for package in "${missing_foreign_packages[@]}"
	do
		printf "sed -i \"\$output_dir\"/foreign-packages.txt -e '/^'%q'\$/d'\n" "$package" >> "$config_save_target"
	done
	LogLeave
fi

#
# Lost/modified files - diff
#

LogEnter "Examining files...\n"

mkdir --parents "$output_dir"/files
mkdir --parents "$system_dir"/files
mkdir --parents "$tmp_dir"

( cd "$output_dir"/files && find . -not -type d -print0 ) | cut --zero-terminated -c 3- | sort --zero-terminated > "$tmp_dir"/output-files
( cd "$system_dir"/files && find . -not -type d -print0 ) | cut --zero-terminated -c 3- | sort --zero-terminated > "$tmp_dir"/system-files

new_files=()

while read -r -d $'\0' file
do
	Log "New file: %s\n" "$(Color C "$file")"
	new_files+=("$file")
done < <(comm -13 --zero-terminated "$tmp_dir"/output-files "$tmp_dir"/system-files)

while read -r -d $'\0' file
do
	if ! diff --no-dereference --brief "$output_dir"/files/"$file" "$system_dir"/files/"$file" > /dev/null
	then
		Log "Changed file: %s\n" "$(Color C "$file")"
		new_files+=("$file")
	fi
done < <(comm -12 --zero-terminated "$tmp_dir"/output-files "$tmp_dir"/system-files)

extra_files=()

while read -r -d $'\0' file
do
	Log "Extra file: %s\n" "$(Color C "$file")"
	extra_files+=("$file")
done < <(comm -23 --zero-terminated "$tmp_dir"/output-files "$tmp_dir"/system-files)

LogLeave # Examining files

#
# Modified file properties
#

LogEnter "Examining file properties...\n"

typeset -A file_property_kind_exists

function AconfReadFileProps() {
	local filename="$1" # Path to file-props.txt to be read
	local varname="$2"  # Name of global associative array variable to read into

	local line
	while read -r line
	do
		if [[ $line =~ ^(.*)\	(.*)\	(.*)$ ]]
		then
			local kind="${BASH_REMATCH[1]}"
			local value="${BASH_REMATCH[2]}"
			local file="${BASH_REMATCH[3]}"
			file="$(eval "printf %s $file")" # Unescape

			if [[ -z "$value" ]]
			then
				unset "$varname[\$file:\$kind]"
			else
				eval "$varname[\$file:\$kind]=\"\$value\""
			fi

			file_property_kind_exists[$kind]=y
		fi
	done < "$filename"
}

typeset -A output_file_props ; AconfReadFileProps "$output_dir"/file-props.txt output_file_props
typeset -A system_file_props ; AconfReadFileProps "$system_dir"/file-props.txt system_file_props

all_file_property_kinds=($(echo "${!file_property_kind_exists[*]}" | sort))

LogLeave

#
# Emit files
#

LogEnter "Registering files...\n"

function PrintFileProps() {
	local file="$1"
	local prop
	local printed=n

	for prop in "${all_file_property_kinds[@]}"
	do
		local key="$file:$prop"
		if [[ -n "${system_file_props[$key]+x}" && ( -z "${output_file_props[$key]+x}" || "${system_file_props[$key]}" != "${output_file_props[$key]}" ) ]]
		then
			local line
			line="$(printf "%s\t%s\t%q" "$prop" "${system_file_props[$key]}" "$file")"
			printf ">> \"\$output_dir\"/file-props.txt echo %q\n" "$line" >> "$config_save_target"
			unset "output_file_props[\$key]"
			unset "system_file_props[\$key]"
			printed=y
		fi
	done

	if [[ $printed == y ]]
	then
		printf "\n" >> "$config_save_target"
	fi
}

typeset -A created_dirs

if [[ ${#new_files[@]} != 0 ]]
then
	LogEnter "Found %s new files.\n" "$(Color G ${#new_files[@]})"
	printf "\n\n# %s - New files\n\n\n" "$(date)" >> "$config_save_target"
	for file in "${new_files[@]}"
	do
		dir="$(dirname "$file")"
		if [[ -z "${created_dirs[$dir]+x}" ]]
		then
			mkdir --parents "$config_dir"/99-unsorted/"$dir"
			printf "mkdir --parents \"\$output_dir\"/files/%q\n" "$dir" >> "$config_save_target"
			created_dirs[$dir]=y
		fi

		cp --no-dereference "$system_dir"/files/"$file" "$config_dir"/99-unsorted/"$file"
		printf "cp --no-dereference \"\$config_dir\"/99-unsorted/%q \"\$output_dir\"/files/%q\n" "$file" "$file" >> "$config_save_target"
		PrintFileProps /"$file"
	done
	LogLeave
fi

if [[ ${#extra_files[@]} != 0 ]]
then
	LogEnter "Found %s extra files.\n" "$(Color G ${#extra_files[@]})"
	printf "\n\n# %s - Extra files\n\n\n" "$(date)" >> "$config_save_target"
	for file in "${extra_files[@]}"
	do
		printf "rm \"\$output_dir\"/files/%q\n" "$file" >> "$config_save_target"
	done
	LogLeave
fi

LogLeave # Emit files

#
# Emit remaining file properties
#

LogEnter "Registering file properties...\n"

new_file_props=()
extra_file_props=()

for key in "${!system_file_props[@]}"
do
	if [[ -z "${output_file_props[$key]+x}" || "${system_file_props[$key]}" != "${output_file_props[$key]}" ]]
	then
		new_file_props+=("$key")
	fi
done

for key in "${!output_file_props[@]}"
do
	if [[ -z "${system_file_props[$key]+x}" ]]
	then
		extra_file_props+=("$key")
	fi
done

if [[ ${#new_file_props[@]} != 0 ]]
then
	printf "\n\n# %s - New file properties\n\n\n" "$(date)" >> "$config_save_target"
	while read -r -d $'\0' key
	do
		line="$(printf "%s\t%s\t%q" "${key##*:}" "${system_file_props[$key]}" "${key%:*}")"
		printf ">> \"\$output_dir\"/file-props.txt echo %q\n" "$line" >> "$config_save_target"
	done < <(Print0Array new_file_props | sort --zero-terminated)
fi

if [[ ${#extra_file_props[@]} != 0 ]]
then
	printf "\n\n# %s - Extra file properties\n\n\n" "$(date)" >> "$config_save_target"
	while read -r -d $'\0' key
	do
		line="$(printf "%s\t\t%q" "${key##*:}" "${key%:*}")"
		printf ">> \"\$output_dir\"/file-props.txt echo %q\n" "$line" >> "$config_save_target"
	done < <(Print0Array extra_file_props | sort --zero-terminated)
fi

LogLeave # Registering file properties

LogLeave # Saving configuration
