#!/bin/bash
set -euo pipefail
source src/common.sh

AconfCompile

# Unknown packages (installed but not listed)

UNKNOWN_PACKAGES=($(comm -13 <(echo "${PACKAGES[*]}") <(echo "${INSTALLED_PACKAGES[*]}")))

if [[ ${#UNKNOWN_PACKAGES[@]} != 0 ]]
then
	printf "Found %s unknown packages. Registering...\n" ${#UNKNOWN_PACKAGES}
	printf "\n\n# %s - Unknown packages\n\n\n" "$(date)" >> "$CONFIG_SAVE_TARGET"
	for PACKAGE in "${UNKNOWN_PACKAGES[@]}"
	do
		printf ">> \"\$OUTPUT_DIR\"/packages.txt echo %q #%s\n" "$PACKAGE" "$(pacman --query --info "$PACKAGE" | grep '^Description' | cut -d ':' -f 2)" >> "$CONFIG_SAVE_TARGET"
	done
fi

# Missing packages (listed but not installed on current system)

MISSING_PACKAGES=($(comm -23 <(echo "${PACKAGES[*]}") <(echo "${INSTALLED_PACKAGES[*]}")))

if [[ ${#MISSING_PACKAGES[@]} != 0 ]]
then
	printf "Found %s missing packages. Un-registering.\n" ${#MISSING_PACKAGES[@]}
	printf "\n\n# %s - Missing packages\n\n\n" "$(date)" >> "$CONFIG_SAVE_TARGET"
	for PACKAGE in "${MISSING_PACKAGES[@]}"
	do
		printf "sed -i \"\$OUTPUT_DIR\"/packages.txt -e '/^'%q'\$/d'\n" "$PACKAGE" >> "$CONFIG_SAVE_TARGET"
	done
fi

# Untracked/modified files - collect

WARN_SIZE_THRESHOLD=$((10*1024*1024))

function AconfAddFile() {
	mkdir --parents "$(dirname "$SYSTEM_DIR"/files/"$1")"
	if sudo test -h "$1"
	then
		ln -s "$(sudo readlink "$1")" "$SYSTEM_DIR"/files/"$1"
	else
		SIZE=$(sudo stat "$1" --format=%s)
		if [[ $SIZE -gt $WARN_SIZE_THRESHOLD ]]
		then
			printf "Warning: copying large file (%s bytes). Add to IGNORE_PATHS to ignore.\n" "$SIZE"
		fi
		( sudo cat "$1" ) > "$SYSTEM_DIR"/files/"$1"
	fi

	{
		printf "mode	%s	%q\n" "$(sudo stat --format=%a "$1")" "$1"
		printf "owner	%s	%q\n" "$(sudo stat --format=%U "$1")" "$1"
		printf "group	%s	%q\n" "$(sudo stat --format=%G "$1")" "$1"
	} >> "$SYSTEM_DIR"/file-props.txt
}

# Untracked files

IGNORE_ARGS=()
for IGNORE_PATH in "${IGNORE_PATHS[@]}"
do
	IGNORE_ARGS+=(-wholename "$IGNORE_PATH" -prune -o)
done

echo "Searching for untracked files..."

while read -r -d $'\0' LINE
do
	#echo "IGNORE_PATHS+='$LINE' # "
	printf "Found untracked file: %s\n" "$LINE"
	AconfAddFile "$LINE"
done < <(																				\
	comm -13 --zero-terminated															\
		 <(pacman --query --list --quiet | sed '/\/$/d' | sort --unique | tr '\n' '\0')	\
		 <(sudo find / -not \(															\
				"${IGNORE_ARGS[@]}"														\
				-type d																	\
				\) -print0 |															\
				  sort --unique --zero-terminated) )									\

# Modified files

ANSI_CLEAR_LINE="[0K"

echo "Searching for modified files..."
while read -r LINE
do
	if [[ $LINE =~ ^(.*):\ \'(.*)\'\ md5sum\ mismatch ]]
	then
		printf "%s: %s\n" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
		# TODO: Check ignores
		AconfAddFile "${BASH_REMATCH[2]}"
	elif [[ $LINE =~ ^(.*):\  ]]
	then
		printf "%s%s\r" "${ANSI_CLEAR_LINE}" "${BASH_REMATCH[1]}"
		#echo "Now at ${BASH_REMATCH[1]}"
	fi
done < <(sudo sh -c "stdbuf -o0 paccheck --md5sum --files --backup --noupgrade 2>&1")
printf "\n"

# Untracked/modified files - diff

mkdir --parents "$OUTPUT_DIR"/files
mkdir --parents "$SYSTEM_DIR"/files
mkdir --parents "$TMP_DIR"

( cd "$OUTPUT_DIR"/files && find . -not -type d -print0 ) | cut --zero-terminated -c 3- | sort --zero-terminated > "$TMP_DIR"/output-files
( cd "$SYSTEM_DIR"/files && find . -not -type d -print0 ) | cut --zero-terminated -c 3- | sort --zero-terminated > "$TMP_DIR"/system-files

NEW_FILES=()

while read -r -d $'\0' FILE
do
	printf "New file: %s\n" "$FILE"
	NEW_FILES+=("$FILE")
done < <(comm -13 --zero-terminated "$TMP_DIR"/output-files "$TMP_DIR"/system-files)

while read -r -d $'\0' FILE
do
	if ! diff --no-dereference --brief "$OUTPUT_DIR"/files/"$FILE" "$SYSTEM_DIR"/files/"$FILE" > /dev/null
	then
		printf "Changed file: %s\n" "$FILE"
		NEW_FILES+=("$FILE")
	fi
done < <(comm -12 --zero-terminated "$TMP_DIR"/output-files "$TMP_DIR"/system-files)

EXTRA_FILES=()

while read -r -d $'\0' FILE
do
	printf "Extra file: %s\n" "$FILE"
	EXTRA_FILES+=("$FILE")
done < <(comm -23 --zero-terminated "$TMP_DIR"/output-files "$TMP_DIR"/system-files)

if [[ ${#NEW_FILES[@]} != 0 ]]
then
	printf "Found %s new files.\n" ${#NEW_FILES[@]}
	printf "\n\n# %s - New files\n\n\n" "$(date)" >> "$CONFIG_SAVE_TARGET"
	for FILE in "${NEW_FILES[@]}"
	do
		mkdir --parents "$(dirname "$CONFIG_DIR"/99-unsorted/"$FILE")"
		cp --no-dereference "$SYSTEM_DIR"/files/"$FILE" "$CONFIG_DIR"/99-unsorted/"$FILE"

		printf "mkdir --parents \"\$OUTPUT_DIR\"/files/%q\n" "$(dirname "$FILE")" >> "$CONFIG_SAVE_TARGET"
		printf "cp --no-dereference \"\$CONFIG_DIR\"/99-unsorted/%q \"\$OUTPUT_DIR\"/files/%q\n" "$FILE" "$FILE" >> "$CONFIG_SAVE_TARGET"
	done
fi

if [[ ${#EXTRA_FILES[@]} != 0 ]]
then
	printf "Found %s extra files.\n" ${#EXTRA_FILES[@]}
	printf "\n\n# %s - Extra files\n\n\n" "$(date)" >> "$CONFIG_SAVE_TARGET"
	for FILE in "${EXTRA_FILES[@]}"
	do
		printf "rm \"\$OUTPUT_DIR\"/files/%q\n" "$FILE" >> "$CONFIG_SAVE_TARGET"
	done
fi

# Modified file properties

function aconf-read-file-props() {
	unset FILE_PROPS
	typeset -Ag "$2"

	while read -r LINE
	do
		if [[ $LINE =~ ^(.*)\	(.*)\	(.*)$ ]]
		then
			if [[ -z "${BASH_REMATCH[2]}" ]]
			then
				unset "$2[${BASH_REMATCH[1]}:${BASH_REMATCH[3]}]"
			else
				eval "$2[\${BASH_REMATCH[1]}:\${BASH_REMATCH[3]}]=\"\${BASH_REMATCH[2]}\""
			fi
		fi
	done < "$1"
}

aconf-read-file-props "$OUTPUT_DIR"/file-props.txt OUTPUT_FILE_PROPS
aconf-read-file-props "$SYSTEM_DIR"/file-props.txt SYSTEM_FILE_PROPS

NEW_FILE_PROPS=()
EXTRA_FILE_PROPS=()

for KEY in "${!SYSTEM_FILE_PROPS[@]}"
do
	if [[ -z "${OUTPUT_FILE_PROPS[$KEY]+x}" || "${SYSTEM_FILE_PROPS[$KEY]}" != "${OUTPUT_FILE_PROPS[$KEY]}" ]]
	then
		NEW_FILE_PROPS+=("$KEY")
	fi
done

for KEY in "${!OUTPUT_FILE_PROPS[@]}"
do
	if [[ -z "${SYSTEM_FILE_PROPS[$KEY]+x}" ]]
	then
		EXTRA_FILE_PROPS+=("$KEY")
	fi
done

if [[ ${#NEW_FILE_PROPS[@]} != 0 ]]
then
	printf "\n\n# %s - New file properties\n\n\n" "$(date)" >> "$CONFIG_SAVE_TARGET"
	for KEY in "${NEW_FILE_PROPS[@]}"
	do
		LINE="${KEY%%:*}	${SYSTEM_FILE_PROPS[$KEY]}	${KEY#*:}"
		printf ">> \"\$OUTPUT_DIR\"/file-props.txt echo %q\n" "$LINE" >> "$CONFIG_SAVE_TARGET"
	done
fi

if [[ ${#EXTRA_FILE_PROPS[@]} != 0 ]]
then
	printf "\n\n# %s - Extra file properties\n\n\n" "$(date)" >> "$CONFIG_SAVE_TARGET"
	for KEY in "${EXTRA_FILE_PROPS[@]}"
	do
		LINE="${KEY%%:*}		${KEY#*:}"
		printf ">> \"\$OUTPUT_DIR\"/file-props.txt echo %q\n" "$LINE" >> "$CONFIG_SAVE_TARGET"
	done
fi

# Report

echo "Done."
