#!/bin/bash
# shellcheck disable=2031
# SC2031: https://github.com/koalaman/shellcheck/issues/732

aconfmgr_version=0.0.0

set -euo pipefail
shopt -s lastpipe

IFS=$'\n'
export LC_COLLATE=C

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ $script_dir == /root/* || $script_dir == /home/* || $script_dir == $HOME/* ]]
then
	# Running locally - use $PWD
	config_dir=./config
	tmp_dir=./tmp
	src_dir=src
else
	# Installed system-wide - use well-defined paths
	xdg_config_dirs="${XDG_CONFIG_DIRS:-$HOME/.config}"
	config_dir="${xdg_config_dirs%%:*}"/aconfmgr
	tmp_dir="${TMPDIR:-/tmp}/aconfmgr-$USER"
	src_dir=/usr/lib/aconfmgr
fi

# shellcheck source=src/common.bash
source "$src_dir"/common.bash
# shellcheck source=src/save.bash
source "$src_dir"/save.bash
# shellcheck source=src/apply.bash
source "$src_dir"/apply.bash

function Usage() {
	printf "aconfmgr v%s\n" "${aconfmgr_version}"
	printf "Written by Vladimir Panteleev <aconfmgr@thecyber%s.net>\n" "shadow"
	printf "https://github.com/CyberShadow/aconfmgr\n"
	echo
	printf "Usage:  %s [OPTIONS]... save|apply\n" "$0"
	echo
	printf "Supported options:\n"
	printf "  -h, --help               Print this message\n"
	printf "  -c, --config DIR         Set the path to your configuration directory\n"
	printf "      --skip-inspection    Skip the system inspection step\n"
	printf "                           (reuse previous results)\n"
	printf "      --aur-helper HELPER  Set AUR helper to use for installing foreign packages\n"
	printf "      --color WHEN         When to use colors in output (always/auto/never)\n"
	printf "      --paranoid           Always prompt before making any changes to the system\n"
	printf "      --yes                Never prompt before making any changes to the system\n"
	echo
	printf "For more information, please refer to the full documentation at:\n"
	printf "https://github.com/CyberShadow/aconfmgr#readme\n"
}

function UsageError() {
	Usage
	echo
	printf "$@"
	echo
	Exit 2
}

function Main() {
	local command=
	local color=

	while [[ $# != 0 ]]
	do
		case "$1" in
			save|apply)
				if [[ -n "$command" ]]
				then
					UsageError "A command has already been specified"
				fi

				command="$1"
				shift
				;;
			-h|--help|help)
				Usage
				Exit 0
				;;
			-c|--config)
				config_dir="$2"
				shift 2
				;;
			--skip-inspection)
				skip_inspection=y
				shift
				;;
			--aur-helper)
				aur_helper="$2"
				shift 2
				;;
			--color)
				color="$2"
				shift 2
				;;
			--paranoid)
				if [[ $prompt_mode != normal ]]
				then
					UsageError "A prompt mode has already been specified"
				fi
				prompt_mode=paranoid
				pacman_opts+=(--confirm)
				yaourt_opts+=(--confirm)
				shift
				;;
			--yes)
				if [[ $prompt_mode != normal ]]
				then
					UsageError "A prompt mode has already been specified"
				fi
				prompt_mode=never
				pacman_opts+=(--noconfirm)
				pacaur_opts+=(--noconfirm)
				yaourt_opts+=(--noconfirm)
				makepkg_opts+=(--noconfirm)
				shift
				;;
			*)
				UsageError "Unrecognized option: %s" "$1"
				;;
		esac
	done

	case "$color" in
		always)
			pacman_opts+=(--color always)
			pacaur_opts+=(--color always)
			yaourt_opts+=(--color)
		;;
		never)
			DisableColor
			pacman_opts+=(--color never)
			pacaur_opts+=(--color never)
			yaourt_opts+=(--nocolor)
			makepkg_opts+=(--nocolor)
			;;
		auto)
			[ -t 1 ] || DisableColor
			pacman_opts+=(--color auto)
			pacaur_opts+=(--color auto)
			;;
		'')
			[ -t 1 ] || DisableColor
			;;
		*)
			UsageError "Unrecognized --color value: %s" "$color"
			;;
	esac

	case "$command" in
		save)
			AconfSave
			;;
		apply)
			AconfApply
			;;
		*)
			Usage
			Exit 2
			;;
	esac

	Exit
}

Main "$@"
